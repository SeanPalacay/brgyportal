import prisma from './prisma';
import * as fs from 'fs';
import * as path from 'path';

// List your table names here (Prisma model names, lowercased)
const TABLES = [
  'user',
  'patient',
  'daycareStudent',
  'event',
  'systemSettings',
  'systemBackup',
  'auditLog',
  // Add more as needed
];

function escapeValue(val: any): string {
  if (val === null || val === undefined) return 'NULL';
  if (typeof val === 'number') return val.toString();
  if (typeof val === 'boolean') return val ? 'TRUE' : 'FALSE';
  return `'${String(val).replace(/'/g, "''")}'`;
}

export async function createSqlBackup(outputDir: string): Promise<{ filePath: string; fileSize: number }> {
  const now = new Date();
  const fileName = `backup_${now.toISOString().replace(/[:.]/g, '-')}.sql`;
  // Remove any duplicate underscores or extra text for a short name
  // (already matches the requested format)
  const filePath = path.join(outputDir, fileName);
  let sql = '-- Simple SQL data backup generated by Prisma\n\n';

  for (const table of TABLES) {
    // @ts-ignore
    const rows = await prisma[table].findMany();
    if (rows.length === 0) continue;
    const columns = Object.keys(rows[0]);
    for (const row of rows) {
      const values = columns.map(col => escapeValue(row[col])).join(', ');
      sql += `INSERT INTO \"${table}\" (${columns.map(c => `\"${c}\"`).join(', ')}) VALUES (${values});\n`;
    }
    sql += '\n';
  }

  fs.mkdirSync(outputDir, { recursive: true });
  fs.writeFileSync(filePath, sql, 'utf8');
  const stats = fs.statSync(filePath);
  return { filePath, fileSize: stats.size };
}
